library(rvest)
library(purrr)
library(tidyverse)

################################################################################

# data scraping and prep

# list of biggest uk cities according to Statista (excluding Northern Ireland)
largest_uk_cities <- c(
  "London",
  "Manchester",
  "Birmingham",
  "Leeds",
  "Glasgow",
  "Liverpool",
  "newcastle%20upon%20tyne",
  "Sheffield",
  "Brighton",
  "Leicester",
  "Edinburgh",
  "Bournemouth",
  "Cardiff",
  "Coventry",
  "Middlesbrough",
  "stoke%20on%20trent"
)

# generate urls
urls <-
  paste0("https://jicregonline.co.uk/jicreg-report?search-term=",
         largest_uk_cities)

# define the scraping function
scraper <- function(urls) {
  read_html(urls) %>%
    html_element("table") %>%
    html_table()
}

# iterate over the urls
cities <- map_dfr(urls, scraper, .id = "city")

# clean names of cities
clean_names <- c(
  "London",
  "Manchester",
  "Birmingham",
  "Leeds",
  "Glasgow",
  "Liverpool",
  "Newcastle",
  "Sheffield",
  "Brighton",
  "Leicester",
  "Edinburgh",
  "Bournemouth",
  "Caerdydd",
  "Coventry",
  "Middlesbrough",
  "Stoke-on-Trent"
)

# match to scraped city id number
clean_names <- as.data.frame(clean_names) |>
  mutate(city = row_number())

# merge data
data <- cities |>
  mutate(city = as.integer(city)) |>
  left_join(clean_names, by = "city") |>
  select(clean_names, everything(),-city)

################################################################################

locations <- read_csv("gb.csv")
locations <- filter(locations, city %in% clean_names$clean_names)
data <- data |> left_join(locations, by = c("clean_names" = "city"))

highest_relative_circ <- data |>
  group_by(clean_names) |>
  top_n(1, `Household Coverage %`)

library(maps)
library(mapdata)

worldmap = map_data('world')

ggplot() +
  geom_polygon(
    data = worldmap,
    aes(x = long, y = lat, group = group),
    fill = 'gray90',
    color = 'black'
  ) +
  coord_fixed(ratio = 1.3,
              xlim = c(-6.2, 2),
              ylim = c(50, 59)) +
  theme_void() +
  geom_point(
    data = highest_relative_circ,
    aes(
      x = lng,
      y = lat,
      shape = Frq,
      color = `Household Coverage %`
    ),
    size = 4,
    alpha = 1
  ) +
  scale_size_area(max_size = 8) +
  theme(title = element_text(size = 12))

################################### manual approach

UK <- map_data("world") %>% filter(region == "UK")
data_uk <- world.cities %>% filter(country.etc == "UK")

# Second graphic with names of the 10 biggest cities
library(ggrepel)
ggplot() +
  geom_polygon(
    data = UK,
    aes(x = long, y = lat, group = group),
    fill = "grey",
    alpha = 0.4
  ) +
  geom_point(
    data = highest_relative_circ,
    aes(x = lng, y = lat, color = `Household Coverage %`),
    size = log(highest_relative_circ$`Area Circ`),
    alpha = 0.7
  ) +
  scale_color_viridis(option = "C") +
  # geom_label_repel(
  #   data = highest_relative_circ,
  #   aes(x = lng, y = lat, label = Newspaper),
  #   size = 3.5,
  #   force = 10,
  #   force_pull = 10,
  #   alpha = 0.7,
  #   min.segment.length = 0,
  # ) +
  theme_void() +
  ylim(49, 57) +
  coord_map() +
  #theme(legend.position="none") +
  labs(title = "The newspapers with highest household coverage",
       subtitle = "% of households covered in the biggest UK cities",
       caption = "Data: JICREG and LMW 2022") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  theme(legend.position = "right") +
  theme(plot.title = element_text(face = "bold", size = 12)) +
  theme(plot.subtitle = element_text(size = 11)) +
  theme(plot.caption = element_text(size = 8)) +
  theme(legend.title = element_text(face = "bold", size = 9))


########################################## LEAFLET approach


library(viridis)
library(leaflet)
pal = colorNumeric("magma",
                   domain = highest_relative_circ$`Household Coverage %`,
                   reverse = TRUE)
leaflet(data = highest_relative_circ) |>
  addProviderTiles(providers$CartoDB.Positron) |>
  addCircleMarkers(
    col = ~ pal(`Household Coverage %`),
    fillOpacity = 1,
    radius = 10,
    stroke = FALSE
  ) |>
  addLegend(pal = pal, values = ~ `Household Coverage %`) |>
  setView(lng = -3, lat = 53.5, zoom = 5.5)


## install 'webshot' package
library(devtools)
install_github("wch/webshot")

library(htmlwidgets)
library(webshot)
library(mapview)
library(webshot2)
## save html to png
mapshot(map, file = "Rplot.png")

## save html to png
saveWidget(map, "temp.html", selfcontained = FALSE)
webshot("temp.html", file = "Rplot.png",
        cliprect = "viewport")